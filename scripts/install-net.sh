#!/bin/bash
# based on Ubuntu Server 18.04.1

# make sure this is run via sudo
if [ -z "$SUDO_USER" ]; then
    echo You must run this script using sudo.
    exit 1
fi

USAGE="Usage: $0 internal-interface internal-address internal-domain external-interface [external-mac]
   ex: sudo $0 enp0s3 192.168.0.1 my.world enp0s8
   ex: sudo $0 enp0s3 192.168.0.10 my.world enp0s8 11:22:33:44:55:66"

# get the parameters
if [ "$#" -ne 4 ] && [ "$#" -ne 5 ]; then
	echo -e "$USAGE"
	exit 1
fi
INT_IF="$1"
INT_IP="$2"
INT_ROOT_IP="${INT_IP%.*}"
NETWORK="$INT_ROOT_IP.0"
INT_DOMAIN="$3"
EXT_IF="$4"
if [ "$#" -eq 5 ]; then
	EXT_MAC="$5"
	EXT_REAL_MAC="$(cat /sys/class/net/$EXT_IF/address)"
else
	EXT_MAC=""
fi

# install some python tools
apt-get install -y python3-pip python3-venv

# create the website virtual environment
sudo -u $SUDO_USER ./install-venv.sh

# remove cloud-init
echo "datasource_list: [ None ]" > /etc/cloud/cloud.cfg.d/90_dpkg.cfg
apt-get purge -y cloud-init
rm -rf /etc/cloud/
rm -rf /var/lib/cloud/
rm -f /etc/netplan/50-cloud-init.yaml

# install Fail2Ban and Dnsmasq
apt-get install -y fail2ban dnsmasq

# disable the systemd DNS stub
RESOLVED_FILE="/etc/systemd/resolved.conf"
sed -i "s/^.*\(DNSStubListener\)=.*$/\1=no/" $RESOLVED_FILE
systemctl restart systemd-networkd.service
systemctl restart systemd-resolved.service

# configure netplan
NETPLAN_FILE="/etc/netplan/50-home-router.yaml"
tee $NETPLAN_FILE > /dev/null << NETPLAN_END
# generated by Home Router
network:
   version: 2
   ethernets:
      $INT_IF:
         addresses: [$INT_IP/24]
         dhcp4: false
         dhcp6: false
         optional : false
         nameservers:
            addresses: [8.8.8.8,8.8.4.4]
            search: [$INT_DOMAIN]
      $EXT_IF:
         addresses: []
         dhcp4: true
         dhcp6: true
NETPLAN_END
if [ -n "$EXT_MAC" ]; then
tee -a $NETPLAN_FILE > /dev/null << MAC_END
         match:
            macaddress: $EXT_REAL_MAC
         macaddress: $EXT_MAC
MAC_END
fi

# restart netplan
netplan generate
netplan apply

# configure Dnsmasq
DNSMASQ_FILE="/etc/dnsmasq.conf"
tee $DNSMASQ_FILE > /dev/null << DNSMASQ_END
domain-needed
bogus-priv
no-resolv
no-poll
strict-order
expand-hosts
bind-interfaces
domain=$INT_DOMAIN
local=/$INT_DOMAIN/
listen-address=127.0.0.1
listen-address=127.0.0.53
listen-address=$INT_IP
interface=$INT_IF
server=8.8.8.8
server=8.8.4.4
dhcp-range=$INT_ROOT_IP.100,$INT_ROOT_IP.254,24h
dhcp-option=option:router,$INT_IP
dhcp-option=option:netmask,255.255.255.0
DNSMASQ_END

# configure Dnsmasq
SCRIPT_PATH="$(dirname $(realpath $0))"
SETTINGS_FILE="$SCRIPT_PATH/../data/settings.xml"
tee $SETTINGS_FILE > /dev/null << SETTINGS_END
<settings>
	<lan-interface>$INT_IF</lan-interface>
	<wan-interface>$EXT_IF</wan-interface>
</settings>
SETTINGS_END

# restart Dnsmasq
systemctl restart dnsmasq

# configure UFW
./config-ufw.sh $INT_IF $INT_IP $EXT_IF

# reboot
reboot